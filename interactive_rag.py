#!/usr/bin/env python3
"""
Interactive RAG Query Script with File Output
Choose any question and save the analysis to a text file
"""

import os
import sys
from datetime import datetime

# Add src to path for imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.workflows.rag_workflow import RAGWorkflow

def run_interactive_rag():
    """Interactive RAG analysis with file output"""
    
    # Example questions from EXAMPLE_QUESTIONS.md
    example_queries = [
        "What are the main risk factors for heart disease?",
        "How can I prevent heart disease?", 
        "What are the symptoms of heart disease?",
        "What causes heart disease?",
        "What lifestyle changes help reduce heart disease risk?",
        "How does exercise affect heart health?",
        "What dietary changes can improve heart health?",
        "How does smoking affect the heart?",
        "What foods are good for heart health?",
        "How much exercise is recommended for heart health?",
        "What are the different types of heart disease?",
        "How does cholesterol affect heart disease?",
        "What is high blood pressure and how does it relate to heart disease?",
        "How does diabetes affect heart disease risk?",
        "What role does family history play in heart disease?",
        "Custom question (enter your own)"
    ]
    
    print("ü§ñ Interactive RAG Analysis with File Output")
    print("=" * 60)
    print("üîç Select a question to analyze:")
    
    for i, query in enumerate(example_queries, 1):
        print(f"  {i}. {query}")
    
    while True:
        try:
            choice = input(f"\nEnter your choice (1-{len(example_queries)}): ").strip()
            choice_num = int(choice)
            
            if 1 <= choice_num <= len(example_queries):
                if choice_num == len(example_queries):  # Custom question
                    query = input("\nüìù Enter your custom question: ").strip()
                    if not query:
                        print("‚ùå Question cannot be empty!")
                        continue
                    filename_prefix = "custom_query"
                else:
                    query = example_queries[choice_num - 1]
                    # Create filename prefix from query
                    filename_prefix = query.lower().replace("?", "").replace(" ", "_")[:30]
                    filename_prefix = "".join(c for c in filename_prefix if c.isalnum() or c == '_')
                
                break
            else:
                print(f"‚ùå Please enter a number between 1 and {len(example_queries)}")
                
        except ValueError:
            print("‚ùå Please enter a valid number")
        except KeyboardInterrupt:
            print("\nüëã Goodbye!")
            return
    
    # Create timestamp for unique filename
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"{filename_prefix}_{timestamp}.txt"
    
    print(f"\nüß™ Processing: '{query}'")
    print(f"üìÅ Output will be saved to: {output_file}")
    print("=" * 60)
    
    try:
        # Initialize workflow
        rag_workflow = RAGWorkflow()
        print("üöÄ Initializing RAG workflow...")
        
        # Execute RAG workflow
        result = rag_workflow.run(
            query=query,
            topic="",
            use_web_search=False
        )
        
        print(f"\n‚úÖ Analysis Status: {result.get('status', 'unknown')}")
        
        if result.get("report"):
            report = result["report"]
            
            # Save to text file
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write("=" * 70 + "\n")
                f.write("RAG ANALYSIS REPORT - HEART DISEASE RESEARCH\n")
                f.write("=" * 70 + "\n")
                f.write(f"Query: {query}\n")
                f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"Status: {result.get('status', 'unknown')}\n")
                f.write(f"Report Length: {len(report)} characters\n")
                f.write("=" * 70 + "\n\n")
                f.write(report)
                f.write("\n\n" + "=" * 70 + "\n")
                f.write("Generated by Deep Research AI Agent\n")
                f.write("Source Documents: healthyheart.pdf, Heart Disease-Full Text.pdf\n")
                f.write("=" * 70 + "\n")
            
            print(f"‚úÖ Report saved to: {output_file}")
            print(f"üìä File size: {os.path.getsize(output_file)} bytes")
            print(f"üìã Report length: {len(report)} characters")
            
        else:
            print("‚ùå No report generated")
            
        # Ask if user wants to analyze another question
        while True:
            try:
                another = input("\nüîÑ Would you like to analyze another question? (y/n): ").strip().lower()
                if another in ['y', 'yes']:
                    print("\n" + "=" * 60)
                    run_interactive_rag()
                    break
                elif another in ['n', 'no']:
                    print("üëã Thank you for using the RAG Analysis Tool!")
                    break
                else:
                    print("‚ùå Please enter 'y' for yes or 'n' for no")
            except KeyboardInterrupt:
                print("\nüëã Goodbye!")
                break
                
    except Exception as e:
        print(f"‚ùå Error during analysis: {e}")
        
        # Save error to file
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("=" * 70 + "\n")
            f.write("RAG ANALYSIS ERROR REPORT\n")
            f.write("=" * 70 + "\n")
            f.write(f"Query: {query}\n")
            f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write("=" * 70 + "\n\n")
            f.write(f"Error: {e}\n\n")
            
            import traceback
            f.write("FULL TRACEBACK:\n")
            f.write("-" * 30 + "\n")
            f.write(traceback.format_exc())
        
        print(f"‚ùå Error details saved to: {output_file}")

if __name__ == "__main__":
    try:
        run_interactive_rag()
    except KeyboardInterrupt:
        print("\nüëã Goodbye!")
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
